/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

package org.mozilla.zest.impl;

import org.mozilla.zest.core.v1.ZestAction;
import org.mozilla.zest.core.v1.ZestActionFail;
import org.mozilla.zest.core.v1.ZestActionScan;
import org.mozilla.zest.core.v1.ZestActionSetToken;
import org.mozilla.zest.core.v1.ZestAssertion;
import org.mozilla.zest.core.v1.ZestAuthentication;
import org.mozilla.zest.core.v1.ZestConditional;
import org.mozilla.zest.core.v1.ZestExpressionAnd;
import org.mozilla.zest.core.v1.ZestExpressionElement;
import org.mozilla.zest.core.v1.ZestExpressionLength;
import org.mozilla.zest.core.v1.ZestExpressionOr;
import org.mozilla.zest.core.v1.ZestExpressionRegex;
import org.mozilla.zest.core.v1.ZestExpressionResponseTime;
import org.mozilla.zest.core.v1.ZestExpressionStatusCode;
import org.mozilla.zest.core.v1.ZestExpressionURL;
import org.mozilla.zest.core.v1.ZestHttpAuthentication;
import org.mozilla.zest.core.v1.ZestRequest;
import org.mozilla.zest.core.v1.ZestScript;
import org.mozilla.zest.core.v1.ZestStatement;
import org.mozilla.zest.core.v1.ZestTransformation;

public class ZestPrinter {

	private static String cleanStr(String str) {
		if (str != null) {
			return str;
		}
		return "";
	}

	public static void summary(ZestScript zs) {
		if (zs == null) {
			System.out.println("Null Zest script");
			return;
		}
		System.out.println("About:         " + zs.getAbout());
		System.out.println("Version:       " + zs.getZestVersion());
		System.out.println("Generated by:  " + cleanStr(zs.getGeneratedBy()));
		System.out.println("Type:          " + cleanStr(zs.getType()));
		System.out.println("Author:        " + cleanStr(zs.getAuthor()));
		System.out.println("Title:         " + cleanStr(zs.getTitle()));
		System.out.println("Description:   " + cleanStr(zs.getDescription()));
		System.out.println("Prefix:        " + cleanStr(zs.getPrefix()));
		System.out.println("Tokens:");
		for (String[] tokens : zs.getTokens().getTokens()) {
			System.out.println("    " + tokens[0] + "=" + tokens[1]);
		}
		for (ZestAuthentication za : zs.getAuthentication()) {
			if (za instanceof ZestHttpAuthentication) {
				ZestHttpAuthentication zha = (ZestHttpAuthentication) za;
				System.out.println("HTTP Authentication:");
				printIndent(1);
				System.out.println("Site:      " + cleanStr(zha.getSite()));
				printIndent(1);
				System.out.println("Realm:     " + cleanStr(zha.getRealm()));
				printIndent(1);
				System.out.println("Username:  " + cleanStr(zha.getUsername()));
				printIndent(1);
				System.out.println("Password:  " + cleanStr(zha.getPassword()));
			} else {
				System.out.println("Authentication not supported: "
						+ za.getElementType());
			}
		}
	}

	private static void printIndent(int indent) {
		printIndent(indent, -1);
	}

	private static void printIndent(int indent, int lineNumber) {
		if (lineNumber >= 0) {
			System.out.format("%3d:", lineNumber);

		} else {
			System.out.print("    ");
		}
		for (int i = 0; i < indent; i++) {
			System.out.print("    ");
		}
	}

	public static void list(ZestStatement stmt, int indent) {
		if (stmt instanceof ZestRequest) {
			ZestRequest req = (ZestRequest) stmt;
			printIndent(indent, stmt.getIndex());
			System.out.println(req.getMethod() + " " + req.getUrl());
			if (req.getHeaders() != null && req.getHeaders().length() > 0) {
				printIndent(indent + 1);
				System.out.println("Headers: " + req.getHeaders());
			}
			if (req.getData() != null && req.getData().length() > 0) {
				printIndent(indent + 1);
				System.out.println("Data: " + req.getData());
			}
			for (ZestTransformation zt : req.getTransformations()) {
				printIndent(indent + 1);
				System.out.println("Transform: " + zt.getElementType());
			}
			for (ZestAssertion za : req.getAssertions()) {
				printIndent(indent + 1);
				System.out.println("Assert: " + za.getElementType());
			}
		} else if (stmt instanceof ZestConditional) {
			ZestConditional zc = (ZestConditional) stmt;
			printIndent(indent, stmt.getIndex());
			System.out.print("IF ");
			printExpression(zc.getRootExpression(), 0);
//			if (zc instanceof ZestExpressionRegex) {
//				ZestExpressionRegex zcr = (ZestExpressionRegex) zc;
//				System.out.println("Regex: " + zcr.getLocation() + " "
//						+ zcr.getRegex());
//			} else if (zc instanceof ZestExpressionStatusCode) {
//				ZestExpressionStatusCode zcs = (ZestExpressionStatusCode) zc;
//				System.out.println("Status Code: " + zcs.getCode());
//			} else if (zc instanceof ZestExpressionResponseTime) {
//				ZestExpressionResponseTime zcs = (ZestExpressionResponseTime) zc;
//				if (zcs.isGreaterThan()) {
//					System.out.println("Status Code: > " + zcs.getTimeInMs());
//				} else {
//					System.out.println("Status Code: < " + zcs.getTimeInMs());
//				}
//			} else {
//				System.out.println("(Unknown conditional: "
//						+ stmt.getElementType() + ")");
//			}
			for (ZestStatement ifStmt : zc.getIfStatements()) {
				list(ifStmt, indent + 1);
			}
			printIndent(indent);
			System.out.println("ELSE");
			for (ZestStatement elseStmt : zc.getElseStatements()) {
				list(elseStmt, indent + 1);
			}
		} else if (stmt instanceof ZestAction) {
			ZestAction za = (ZestAction) stmt;
			printIndent(indent, stmt.getIndex());
			if (za instanceof ZestActionFail) {
				ZestActionFail zaf = (ZestActionFail)za;
				System.out.println("Action Fail: " + zaf.getPriority() + " : " + zaf.getMessage());
			} else if (za instanceof ZestActionScan) {
				ZestActionScan zas = (ZestActionScan) za;
				System.out.println("Action Scan: " + zas.getTargetParameter());
			} else if (za instanceof ZestActionSetToken) {
				ZestActionSetToken zas = (ZestActionSetToken) za;
				System.out.println("Action Set Token: " + zas.getTokenName());
			} else {
				System.out.println("(Unknown action: " + stmt.getElementType()
						+ ")");
			}
		} else {
			printIndent(indent, stmt.getIndex());
			System.out.println("(Unknown: " + stmt.getElementType() + ")");
		}

	}

	public static void printExpression(ZestExpressionElement element, int indent) {
		if(element.isInverse())
			System.out.print("NOT ");
		if (element.isLeaf()) {
			if (element instanceof ZestExpressionLength) {
				ZestExpressionLength lengthExpr = (ZestExpressionLength) element;
				System.out.print("length: " + lengthExpr.getLength()
						+ " approx: " + lengthExpr.getApprox());
			} else if (element instanceof ZestExpressionRegex) {
				ZestExpressionRegex regexExpr = (ZestExpressionRegex) element;
				System.out.print("Regex: " + regexExpr.getLocation() + " "
						+ regexExpr.getRegex());
			} else if (element instanceof ZestExpressionResponseTime) {
				ZestExpressionResponseTime timeExpr = (ZestExpressionResponseTime) element;
				System.out.print("Response Time: "
						+ (timeExpr.isGreaterThan() ? ">" : "<=")
						+ timeExpr.getTimeInMs() + " ");
			} else if (element instanceof ZestExpressionStatusCode) {
				ZestExpressionStatusCode codeExpr = (ZestExpressionStatusCode) element;
				System.out.print("Status Code: " + codeExpr.getCode());
			} else if (element instanceof ZestExpressionURL) {
//				ZestExpressionURL urlExpr=(ZestExpressionURL)element;
				System.out.print("URL ");
			}
		} else {
			printIndent(indent);
			int lastChildPrinted;
			if (element instanceof ZestExpressionAnd) {
				ZestExpressionAnd andElement = (ZestExpressionAnd) element;
				System.out.println();
				printIndent(indent);
				System.out.print("AND: (");
				for (lastChildPrinted = 0; lastChildPrinted < andElement.getChildrenCondition().size() - 1; lastChildPrinted++) {
					printExpression(andElement.getChild(lastChildPrinted), indent+1);
					System.out.print(" && ");
				}
				printExpression(andElement.getChild(lastChildPrinted), indent+1);
				System.out.println(")");
				printIndent(indent);
			} else if (element instanceof ZestExpressionOr) {
				ZestExpressionOr orElement = (ZestExpressionOr) element;
				System.out.println();
				printIndent(indent);
				System.out.print("OR: (");
				for (lastChildPrinted = 0; lastChildPrinted < orElement.getChildrenCondition().size() - 1; lastChildPrinted++) {
					printExpression(orElement.getChild(lastChildPrinted), indent+1);
					System.out.print(" || ");
				}
				printExpression(orElement.getChild(lastChildPrinted), indent+1);
//				System.out.println();
//				printIndent(indent);
				System.out.println(")");
				printIndent(indent);
			}
//			System.out.println();
		}
	}

	public static void list(ZestScript zs) {
		summary(zs);

		if (zs != null) {
			System.out.println("Statements:");
			for (ZestStatement stmt : zs.getStatements()) {
				list(stmt, 1);
			}
		}
	}

}
